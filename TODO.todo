☐ Write documentation
    ☐ Landing page image
    ☐ Logo
    ☐ Icon
    ☐ remove documentation building script
☐ Write benchmarks
☐ Write tests
☐ Write INSTALL
☐ Write Readme
☐ Rename include to holor?
☐ Write License and unify license plate on all files
☐ Create repo and publish it

holor.h and layout.h:
    ☐ Now it is possible to create an empy holor without specifying its legnths or elements. To make this useful, we should add the functionality to later specify the lenghts of the holor (and its underlying layout), upadating the size and reserving the appropriate space in memory

holor_concepts.h:
    ☐ //SKIP Concept LayoutType (to be used in layout.h) => //NOTE: the indexing constraint (check that LayoutType supports indexing) requires to verify the existance of a variadic member function with N arguments. I cannot find a way to express this without adding other template parameters to the concept and probably it is not doable 
    ☐ //SKIP Concept HolorType (to be used in holor_ref.h and holor_printer.h) => //NOTE HolorType requires LayoutType. Therefore, if LayoutType cannot be implemented  the indexing function requires a variadic template with size N. I cannot ind a way to express this

layout.h:
    ☐ When slicing a Layout in slice_dimension, each step of the recursion returns a subLayout. This seems inefficient. Is it possible to avoid the creation of all these intermediate objects, perhaps using Coroutines? Additionally, the slicing of the arrays of lengths and strides that are inside the Layout to be sliced could be done with ranges, which support lazy evaluation. //IMPROVEMENT!!

indexes.h:
    ☐ So far the step in range is not supported to create ranges with gaps (for example range{1,7,2} => [1,3,5,7]). This would imply reworking Layouts, namely the way they are indexed with a range. //NOTE: not a priority, avoid for the time being
    ☐ Generalize to allow also ranges in decreasing order (for example range{7,1,-2} => [7,5,3,1]). This would imply reworking Layouts, namely the way they are indexed with a range.  //NOTE: not a priority, avoid for the time being

Archive:
  ✔ Switch to MkDocs @done(21-09-16 23:30)
  ✔ Add script that builds the documentation @done(21-09-10 10:46)
  ✔ Write examples @done(21-09-10 10:21)
  ✔ Verify CMake and test library installation @started(21-09-07 12:13) @done(21-09-09 14:35) @lasted(2d2h22m32s)
  ✔ add installation scripts @done(21-09-09 14:35)
  ✔ Update License @done(21-07-16 23:38)
  ✔ //TODO: reorder this file, common_concepts and common_predicates. @done(21-07-15 15:44) @project(static_assert.h)
  ✔ add example to the description of the functions @done(21-07-15 15:25) @project(utils.h)
  ✔ verify and clean up the print function @done(21-07-14 15:51) @project(holor_printer.h)
  ✔ implement concept Printable @done(21-07-14 15:31) @project(holor_printer.h)
  ✔ Add function to HolorRef elements from an Holor or HolorRef with suitable dimensions and lengths. Essentially, this function should wrap a dimensionality check plus a call to std::copy (or move in the case of a Holor rvalue) @done(21-07-14 14:22) @project(holor_ref.h)
  ✔ //NOTE: check includes @done(21-07-14 13:02) @project(holor_ref.h)
  ✔ holor.h: @done(21-07-14 11:54)
  ✔ //NOTE: check includes @done(21-07-14 11:54)
  ✔ Finish implementing constructors and assignment operators @done(21-07-14 11:32) @project(holor.h)
  ✔ initializer.h: @done(21-07-14 11:31)
  ✔ Now the slicing function reduces the dimension of the Layout (and thus of the holor container). It could be useful to have also a version that retains the dimensions of the Layout (and thus of container,  so that for example a slicing a column from a matrix has lenghts [1, c] rather than [c]) @done(21-07-13 22:44) @project(layout.h)
  ✘ //TODO: improve description, perhaps with images @cancelled(21-07-13 16:55) @project(layout.h)
  ✔ //TODO: add specialization of element indexing for a Layout<4> (used in four-dimensional tensors) @done(21-07-13 15:17) @project(layout.h)
  ✔ //NOTE: check includes @done(21-07-13 15:17) @project(layout.h)
  ✘ //TODO: Layout concept (refer to https://andreasfertig.blog/2020/08/cpp20-concepts-testing-constrained-functions/ for info on constrained variadic function templates). This was cancelled because it is not possible to verify that a type can be indexed with a variadic template of arguments without passing the template arguments to the check, i.e., without specializing the layout. Namely, it is not possible to have a template<typename T> concept Layout, but it should be template<typename T, typename... Args> concept Layout. @cancelled(21-07-13 14:01) @project(layout.h)
  ✔ //TODO: change dependencies in layout.h to use this header, and in layout.h add dynamic_checks on indexes (those that cannot be done in indexes.h) @done(21-07-12 20:00) @project(indexes.h)
  ✔ Templatize `dim`: Right now, the recursive slicing operation on a layout (slice_dimension, slice_helper) take a size_t dim as an argument. Conceptually, it would make sense to have it as a template parameter, to separate the indexing argument from the dimension. Moreover, in slice_helper `dim` is used to unwind the recursive calls to the function, therefore it would be better set as a template parameter. Using a template parameter would also make it possible to translate all the checks on dim as compile time requiurements, rather than dynamic assertions. The problem is that simply changing it to a template parameter makes slice_helper not compile anymore @done(21-04-30 11:18) @project(layout.h)
