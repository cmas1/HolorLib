cmake and compilation:
    ☐ //TODO: on MacOS, suing the latest Xcode version, the code does not compile because ranges are not yet supported by Apple Clang. As a temporary workaround, we qare using the LLVM Clang version on macOS, and we specify in the cmakelists to use the -fexperimental-library compiler flag if on apple. this check is a temporary workaround and should be improved, checking also the compiler version.

documentation:
    ☐ update the installation page to use the provide scripts
    ☐ review all documentation

circular slice:
    ☐ //WIP create a circular Layout that allows to circularly take a slice, but which cannot be indexed using ranges (i.r. it cannot be further sliced)
    ☐ Update the layout concepts: a layout Type can be one of two concepts, a sliceable layout (like a normal layout) or a circular layout (not sliceable). Perhaps differentiate the LayoutTypeTag in layout_concepts.h
    ☐ Update the other files that use layouts concepts, to use a sliceable laayout concept
    ☐ create a circular holor view (only a view), which cannot be sliced
    ☐ modify Holor and HolorRef to allow them to be circularly sliced, in which case they return a circular holor view
    ☐ update holor concepts

holor operations:
    ☐ write documentation
    ☐ add tests
    ☐ test the operations with references
    ☐ add benchmarks
    ☐ //IMPROVE: the operations should be computed more efficiently, pipelining them.

holor_concepts.h:
    ☐ make a single HolorType (what is currently the DecaysToHolorType) and restructure the rest of the library accordingly

holor.h and holor_ref.h:
    ☐ Layout has a function slice_unreduced, to slice a Layout without removing its singleton dimensions. However, its counterpart is not present in Holor or HolorRef. We should add to them a slice_unreduced command that uses internally the layout::slice_unreduced.
    ☐ Add a remove singleton dimension function that removes the coordinates that have unit length
    
layout.h:
    ☐ In the constructor from containers of lengths, use the universal reference &&
    ☐ //IMPROVE: When slicing a Layout in slice_dimension, each step of the recursion returns a subLayout. This is inefficient, as confirmed by the benchmark BM_HolorSlicing. Is it possible to avoid the creation of all these intermediate objects, perhaps using Coroutines? Additionally, the slicing of the arrays of lengths and strides that are inside the Layout to be sliced could be done with ranges, which support lazy evaluation. 
    ☐ Add a remove singleton dimension function that removes the coordinates that have unit length

indexes.h:
    ☐ add support for ranges in decreasing order
    ☐ add support for non unitary steps in range

New Features:
    ☐ Add circular layouts? //CHECK it does not seem to be feasible - see notes
    ☐ Add layout with indices to allow slicing a container selecting disjoined elements //CHECK This can be done, but the interface with the existing layouts and holors should be consistent. Can a indexed layout only be sliced by passing indices or could it be sliced also normally?

Archive:
  ✔ //FIXME remove operation Circular Slice @done(23-01-14 09:32) @project(holor operations)
  ✔ add permutation operation @done(22-07-13 09:39) @project(holor operations (beta only))
  ✔ Implement Broadcast op @done(22-07-04 14:23) @project(holor operations (beta only))
  ✔ Implement Concatenate op @done(22-07-06 23:16) @project(holor operations (beta only))
  ✔ Implement Reduce op @done(22-07-04 14:23) @project(holor operations (beta only))
  ✔ Implement Apply op @done(22-07-04 14:39) @project(holor operations (beta only))
  ✔ Implement Circulate op @done(22-07-06 14:49) @project(holor operations (beta only))
  ✔ Implement Transpose op @done(22-07-06 12:22) @project(holor operations (beta only))
  ✔ Implement Transpose_view op @done(22-07-06 12:26) @project(holor operations (beta only))
  ✔ In all operations add require clause to constrain OP to be a binary or unary function? @done(22-07-07 10:14) @project(holor operations (beta only))
  ✔ in all operations verify that the types of the inputs are consistent @done(22-07-07 10:15) @project(holor operations (beta only))
  ✔ write comments on the functions @done(22-07-07 11:22) @project(holor operations (beta only))
  ✔ write examples @done(22-07-07 11:22) @project(holor operations (beta only))
  ✔ finish adding the slice operation that takes a range as input @done(22-07-06 18:52) @project(holor.h and holor_ref.h)
  ✔ //WIP cleanup contructor from layout and add to docs @done(22-07-06 12:37) @project(holor.h and holor_ref.h)
  ✔ //WIP add transpose functions to docs @done(22-07-06 12:37) @project(layout.h)
  ✔ revisit container concepts (check BSTools) @done(22-07-01 12:08) @project(static_assertions.h)
  ✘ LayoutIndexed (required by HolorRefIndexed): @cancelled(22-06-21 18:48)
  ✘ create structure with indices @cancelled(22-06-21 18:48)
  ✘ write constructors and assignment @cancelled(22-06-21 18:48)
  ✘ write get set functions @cancelled(22-06-21 18:48)
  ✘ write access functions @cancelled(22-06-21 18:48)
  ✘ write slicing by indices functions @cancelled(22-06-21 18:48)
  ✘ write slicing functions @cancelled(22-06-21 18:48)
  ✘ update concept @cancelled(22-06-21 18:48)
  ✘ write conversion between LayoutIndexed and Layout? @cancelled(22-06-21 18:48)
  ✘ @cancelled(22-06-21 18:48)
  ✘ HolorRefIndexed (Holor views with non contiguous elements denoted with indices): @cancelled(22-06-21 18:48)
  ✘ HolorRefIndexed shall be constructed from a Holor or HolorRef, given a set of indices and dimensions @cancelled(22-06-21 18:48)
  ✘ implement iterators for HolorRefIndexed @cancelled(22-06-21 18:48)
  ✘ implement acces operations for HolorRefIndexed @cancelled(22-06-21 18:48)
  ✘ HolorRefIndexed can be generated by slicing with indices any other HolorType, or also by a normal slicing of a HolorRefIndexed. @cancelled(22-06-21 18:48)
  ✘ integrate HolorRefIndexed with Holor and HolorRef, by providing them with a slicing operation that takes indices @cancelled(22-06-21 18:48)
  ✘ Must update the holor concpet to apply to this reference as well @cancelled(22-06-21 18:48)
  ✘ Add functions to create a Holor from a HolorRefIndexed @cancelled(22-06-21 18:48)
  ✔ create a new file for HolorRefIndexed. These object need to contain a Holor of indices for the sliced element @done(22-06-20 17:17) @project(HolorRefIndexed (Holor views with non contiguous elements denoted with indices))
  ✘ //WIP Modify Layouts to support circular indexing! NOT DOABLE @cancelled(22-06-20 09:53) @project(layout.h)
  ✘ //WIP modify ranges to support decreasing order. Remove the step, because for now we will consider only unit steps, but it is necessary to add a direction @cancelled(22-04-30 11:33) @project(indexes.h)
  ✘ So far the step in range is not supported to create ranges with gaps (for example range{1,7,2} => [1,3,5,7]). This would imply reworking Layouts, namely the way they are indexed with a range. //NOTE: not a priority, avoid for the time being @cancelled(22-04-14 09:05) @project(indexes.h)
  ✘ Generalize to allow also ranges in decreasing order (for example range{7,1,-2} => [7,5,3,1]). This would imply reworking Layouts, namely the way they are indexed with a range.  //NOTE: not a priority, avoid for the time being @cancelled(22-04-14 09:05) @project(indexes.h)
  ✔ create a broadcast function @done(22-04-09 10:20) @project(holor operations)
  ✔ create header holor_ops.h for common operations on holors //WIP @done(22-04-07 20:14) @project(holor operations)
  ✔ //WIP add function to access an element given a container of SingleIndex @done(22-04-06 20:16) @project(holor.h and holor_ref.h)
  ✔ //WIP extend operator() to work with both sized and resizeabe containers of SingleIndex @done(22-04-06 08:21) @project(layout.h)
  ✔ update license in all files, correcting also the typo suholorantial @done(22-03-31 11:31) @project(license)
  ✔ Put the layout stuff in another folder and reorganize the documentation accordingly @done(22-03-31 11:24) @project(Code Organization)
  ✘ in layout_types.h and holor_types.h may leave only the tag, moving the rest into layout_concepts.h and holor_concepts. //TODO next @cancelled(22-03-31 11:15) @project(Code Organization)
  ✔ Add Documentation for the LayoutType Concept @done(22-03-31 11:15) @project(Concepts)
  ✔ Add Documentation for the HolorType Concept @done(22-03-31 11:15) @project(Concepts)
  ✔ Concept HolorType @done(22-03-31 09:29) @project(Concepts)
  ✔ //FIXME add decay to layout type constraints @done(22-03-29 16:48) @project(Concepts)
  ✔ Concept LayoutType @done(22-03-22 09:22) @project(Concepts)
  ✔ //WIP //FIXME: now Holors can have 0 dimensions. This may not be optimal. Check if it shoud be constrained (and all the methods inside holor and holor_ref) @done(22-03-21 10:51) @project(holor.h and holor_ref.h)
  ✔  Add constraint that N>0 to the documentation, and update the api for the functions, explaining how some of them do not apply, depending on N (e.g., row requires N>1, etc.) @done(22-03-21 10:51) @project(holor.h and holor_ref.h)
  ✔ //WIP //FIXME: check the file layout.h. Now it is possible to have a Layout<0>. Shall it be removed? @done(22-03-21 10:51) @project(layout.h)
  ✔  Add constraint that N>0 to the documentation. Also update the api for slice_dimension with a single num, also explaining that it is not available for a Layout with N=1 @done(22-03-21 10:51) @project(layout.h)
  ✔ RESIZE: Now it is possible to create an empy holor without specifying its legnths or elements. To make this useful, we should add the functionality to later specify the lenghts of the holor or resize it (and its underlying layout), upadating the size and reserving the appropriate space in memory @done(22-01-20 12:39) @project(holor.h and layout.h)
  ✔ (Holor only) rename the function lengths(dim) to length(dim), to make the difference with lenghts() more intuitive. @done(22-01-20 11:40) @project(holor.h and holor_ref.h)
  ✘ finalize the constructor from a pack of size_t! //canceled because conflicting with constructor from nested list @cancelled(22-01-20 11:49) @project(holor.h and layout.h)
  ✔ upload smaller logo and icon @done(21-10-19 09:26)
  ✔ Write Readme @done(21-10-18 10:35)
  ✔ Create repo and publish it @done(21-10-18 10:35)
  ✔ Write documentation: @done(21-10-15 15:43)
  ✔ Logo @done(21-10-15 15:43)
  ✔ Icon @done(21-10-15 15:43)
  ✔ Last checks, running all tests, benchmarks and examples @done(21-10-15 15:08)
  ✔ Write License and unify license plate on all files @done(21-10-15 14:42)
  ✔ Write INSTALL @done(21-10-15 14:35)
  ✔ //WIP Write benchmarks @done(21-10-15 14:27)
  ✔ clean up Installation section @done(21-10-14 18:23)
  ✔ Write tests @done(21-10-14 14:00)
  ✔ //FIXME: HolorRef iterators are still broken. given a HolorRef h1, the ditsance std::distance(h1.cbegin(), h1.cend()) comes out wrong. @done(21-10-14 10:37) @project(iterators)
  ✔ //WIP quickly check if they are ok and add to API documentation @done(21-10-13 13:53) @project(holor_comparisons)
  ✔ //FIXME there is an error with HoloRef iterators. @done(21-10-13 10:18) @project(iterators)
  ✔ Implement comparison operators. @done(21-10-12 12:40) @project(layout.h)
  ✔ write examples section @done(21-10-08 16:37)
  ✔ write API section @done(21-10-04 10:22)
  ✔ remove documentation building script @done(21-09-27 18:37)
  ✔ clean up the Getting Started section @done(21-09-27 18:37)
  ✔ Landing page image @done(21-09-22 09:03)
  ✔ Switch to MkDocs @done(21-09-16 23:30)
  ✔ Add script that builds the documentation @done(21-09-10 10:46)
  ✔ Write examples @done(21-09-10 10:21)
  ✔ Verify CMake and test library installation @started(21-09-07 12:13) @done(21-09-09 14:35) @lasted(2d2h22m32s)
  ✔ add installation scripts @done(21-09-09 14:35)
  ✔ Update License @done(21-07-16 23:38)
  ✔ //TODO: reorder this file, common_concepts and common_predicates. @done(21-07-15 15:44) @project(static_assert.h)
  ✔ add example to the description of the functions @done(21-07-15 15:25) @project(utils.h)
  ✔ verify and clean up the print function @done(21-07-14 15:51) @project(holor_printer.h)
  ✔ implement concept Printable @done(21-07-14 15:31) @project(holor_printer.h)
  ✔ Add function to HolorRef elements from an Holor or HolorRef with suitable dimensions and lengths. Essentially, this function should wrap a dimensionality check plus a call to std::copy (or move in the case of a Holor rvalue) @done(21-07-14 14:22) @project(holor_ref.h)
  ✔ //NOTE: check includes @done(21-07-14 13:02) @project(holor_ref.h)
  ✔ holor.h: @done(21-07-14 11:54)
  ✔ //NOTE: check includes @done(21-07-14 11:54)
  ✔ Finish implementing constructors and assignment operators @done(21-07-14 11:32) @project(holor.h)
  ✔ initializer.h: @done(21-07-14 11:31)
  ✔ Now the slicing function reduces the dimension of the Layout (and thus of the holor container). It could be useful to have also a version that retains the dimensions of the Layout (and thus of container,  so that for example a slicing a column from a matrix has lenghts [1, c] rather than [c]) @done(21-07-13 22:44) @project(layout.h)
  ✘ //TODO: improve description, perhaps with images @cancelled(21-07-13 16:55) @project(layout.h)
  ✔ //TODO: add specialization of element indexing for a Layout<4> (used in four-dimensional tensors) @done(21-07-13 15:17) @project(layout.h)
  ✔ //NOTE: check includes @done(21-07-13 15:17) @project(layout.h)
  ✘ //TODO: Layout concept (refer to https://andreasfertig.blog/2020/08/cpp20-concepts-testing-constrained-functions/ for info on constrained variadic function templates). This was cancelled because it is not possible to verify that a type can be indexed with a variadic template of arguments without passing the template arguments to the check, i.e., without specializing the layout. Namely, it is not possible to have a template<typename T> concept Layout, but it should be template<typename T, typename... Args> concept Layout. @cancelled(21-07-13 14:01) @project(layout.h)
  ✔ //TODO: change dependencies in layout.h to use this header, and in layout.h add dynamic_checks on indexes (those that cannot be done in indexes.h) @done(21-07-12 20:00) @project(indexes.h)
  ✔ Templatize `dim`: Right now, the recursive slicing operation on a layout (slice_dimension, slice_helper) take a size_t dim as an argument. Conceptually, it would make sense to have it as a template parameter, to separate the indexing argument from the dimension. Moreover, in slice_helper `dim` is used to unwind the recursive calls to the function, therefore it would be better set as a template parameter. Using a template parameter would also make it possible to translate all the checks on dim as compile time requiurements, rather than dynamic assertions. The problem is that simply changing it to a template parameter makes slice_helper not compile anymore @done(21-04-30 11:18) @project(layout.h)
