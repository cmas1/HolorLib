license:
    ☐ update license in all files, correcting also the typo suholorantial //TODO next

static_assertions.h:
    ☐ revisit container concepts (check BSTools)

holor.h and holor_ref.h:
    ☐ Layout has a function slice_unreduced, to slice a Layout without removing its singleton dimensions. However, its counterpart is not present in Holor or HolorRef. We should add to them a slice_unreduced command that uses internally the layout::slice_unreduced.

Concepts:
    ☐ Add Documentation for the LayoutType Concept //TODO next
    ☐ Add Documentation for the HolorType Concept //TODO next

Code Organization:
    ☐ Put the layout stuff in another folder and reorganize the documentation accordingly //TODO next
    ☐ in layout_types.h and holor_types.h may leave only the tag, moving the rest into layout_concepts.h and holor_concepts. //TODO next

layout.h:
    ☐ In the constructor from containers of lengths, use the universal reference &&
    ☐ //IMPROVEMENT!! When slicing a Layout in slice_dimension, each step of the recursion returns a subLayout. This is inefficient, as confirmed by the benchmark BM_HolorSlicing. Is it possible to avoid the creation of all these intermediate objects, perhaps using Coroutines? Additionally, the slicing of the arrays of lengths and strides that are inside the Layout to be sliced could be done with ranges, which support lazy evaluation. 

indexes.h:
    ☐ So far the step in range is not supported to create ranges with gaps (for example range{1,7,2} => [1,3,5,7]). This would imply reworking Layouts, namely the way they are indexed with a range. //NOTE: not a priority, avoid for the time being
    ☐ Generalize to allow also ranges in decreasing order (for example range{7,1,-2} => [7,5,3,1]). This would imply reworking Layouts, namely the way they are indexed with a range.  //NOTE: not a priority, avoid for the time being

Archive:
  ✔ Concept HolorType @done(22-03-31 09:29) @project(Concepts)
  ✔ //FIXME add decay to layout type constraints @done(22-03-29 16:48) @project(Concepts)
  ✔ Concept LayoutType @done(22-03-22 09:22) @project(Concepts)
  ✔ //WIP //FIXME: now Holors can have 0 dimensions. This may not be optimal. Check if it shoud be constrained (and all the methods inside holor and holor_ref) @done(22-03-21 10:51) @project(holor.h and holor_ref.h)
  ✔  Add constraint that N>0 to the documentation, and update the api for the functions, explaining how some of them do not apply, depending on N (e.g., row requires N>1, etc.) @done(22-03-21 10:51) @project(holor.h and holor_ref.h)
  ✔ //WIP //FIXME: check the file layout.h. Now it is possible to have a Layout<0>. Shall it be removed? @done(22-03-21 10:51) @project(layout.h)
  ✔  Add constraint that N>0 to the documentation. Also update the api for slice_dimension with a single num, also explaining that it is not available for a Layout with N=1 @done(22-03-21 10:51) @project(layout.h)
  ✔ RESIZE: Now it is possible to create an empy holor without specifying its legnths or elements. To make this useful, we should add the functionality to later specify the lenghts of the holor or resize it (and its underlying layout), upadating the size and reserving the appropriate space in memory @done(22-01-20 12:39) @project(holor.h and layout.h)
  ✔ (Holor only) rename the function lengths(dim) to length(dim), to make the difference with lenghts() more intuitive. @done(22-01-20 11:40) @project(holor.h and holor_ref.h)
  ✘ finalize the constructor from a pack of size_t! //canceled because conflicting with constructor from nested list @cancelled(22-01-20 11:49) @project(holor.h and layout.h)
  ✔ upload smaller logo and icon @done(21-10-19 09:26)
  ✔ Write Readme @done(21-10-18 10:35)
  ✔ Create repo and publish it @done(21-10-18 10:35)
  ✔ Write documentation: @done(21-10-15 15:43)
  ✔ Logo @done(21-10-15 15:43)
  ✔ Icon @done(21-10-15 15:43)
  ✔ Last checks, running all tests, benchmarks and examples @done(21-10-15 15:08)
  ✔ Write License and unify license plate on all files @done(21-10-15 14:42)
  ✔ Write INSTALL @done(21-10-15 14:35)
  ✔ //WIP Write benchmarks @done(21-10-15 14:27)
  ✔ clean up Installation section @done(21-10-14 18:23)
  ✔ Write tests @done(21-10-14 14:00)
  ✔ //FIXME: HolorRef iterators are still broken. given a HolorRef h1, the ditsance std::distance(h1.cbegin(), h1.cend()) comes out wrong. @done(21-10-14 10:37) @project(iterators)
  ✔ //WIP quickly check if they are ok and add to API documentation @done(21-10-13 13:53) @project(holor_comparisons)
  ✔ //FIXME there is an error with HoloRef iterators. @done(21-10-13 10:18) @project(iterators)
  ✔ Implement comparison operators. @done(21-10-12 12:40) @project(layout.h)
  ✔ write examples section @done(21-10-08 16:37)
  ✔ write API section @done(21-10-04 10:22)
  ✔ remove documentation building script @done(21-09-27 18:37)
  ✔ clean up the Getting Started section @done(21-09-27 18:37)
  ✔ Landing page image @done(21-09-22 09:03)
  ✔ Switch to MkDocs @done(21-09-16 23:30)
  ✔ Add script that builds the documentation @done(21-09-10 10:46)
  ✔ Write examples @done(21-09-10 10:21)
  ✔ Verify CMake and test library installation @started(21-09-07 12:13) @done(21-09-09 14:35) @lasted(2d2h22m32s)
  ✔ add installation scripts @done(21-09-09 14:35)
  ✔ Update License @done(21-07-16 23:38)
  ✔ //TODO: reorder this file, common_concepts and common_predicates. @done(21-07-15 15:44) @project(static_assert.h)
  ✔ add example to the description of the functions @done(21-07-15 15:25) @project(utils.h)
  ✔ verify and clean up the print function @done(21-07-14 15:51) @project(holor_printer.h)
  ✔ implement concept Printable @done(21-07-14 15:31) @project(holor_printer.h)
  ✔ Add function to HolorRef elements from an Holor or HolorRef with suitable dimensions and lengths. Essentially, this function should wrap a dimensionality check plus a call to std::copy (or move in the case of a Holor rvalue) @done(21-07-14 14:22) @project(holor_ref.h)
  ✔ //NOTE: check includes @done(21-07-14 13:02) @project(holor_ref.h)
  ✔ holor.h: @done(21-07-14 11:54)
  ✔ //NOTE: check includes @done(21-07-14 11:54)
  ✔ Finish implementing constructors and assignment operators @done(21-07-14 11:32) @project(holor.h)
  ✔ initializer.h: @done(21-07-14 11:31)
  ✔ Now the slicing function reduces the dimension of the Layout (and thus of the holor container). It could be useful to have also a version that retains the dimensions of the Layout (and thus of container,  so that for example a slicing a column from a matrix has lenghts [1, c] rather than [c]) @done(21-07-13 22:44) @project(layout.h)
  ✘ //TODO: improve description, perhaps with images @cancelled(21-07-13 16:55) @project(layout.h)
  ✔ //TODO: add specialization of element indexing for a Layout<4> (used in four-dimensional tensors) @done(21-07-13 15:17) @project(layout.h)
  ✔ //NOTE: check includes @done(21-07-13 15:17) @project(layout.h)
  ✘ //TODO: Layout concept (refer to https://andreasfertig.blog/2020/08/cpp20-concepts-testing-constrained-functions/ for info on constrained variadic function templates). This was cancelled because it is not possible to verify that a type can be indexed with a variadic template of arguments without passing the template arguments to the check, i.e., without specializing the layout. Namely, it is not possible to have a template<typename T> concept Layout, but it should be template<typename T, typename... Args> concept Layout. @cancelled(21-07-13 14:01) @project(layout.h)
  ✔ //TODO: change dependencies in layout.h to use this header, and in layout.h add dynamic_checks on indexes (those that cannot be done in indexes.h) @done(21-07-12 20:00) @project(indexes.h)
  ✔ Templatize `dim`: Right now, the recursive slicing operation on a layout (slice_dimension, slice_helper) take a size_t dim as an argument. Conceptually, it would make sense to have it as a template parameter, to separate the indexing argument from the dimension. Moreover, in slice_helper `dim` is used to unwind the recursive calls to the function, therefore it would be better set as a template parameter. Using a template parameter would also make it possible to translate all the checks on dim as compile time requiurements, rather than dynamic assertions. The problem is that simply changing it to a template parameter makes slice_helper not compile anymore @done(21-04-30 11:18) @project(layout.h)
